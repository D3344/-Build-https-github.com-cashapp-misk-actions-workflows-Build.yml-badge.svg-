#!/bin/bash

# Run tests.
#
# If an app contains a "pre-test" target it will be run to provide any prerequisites for testing.
#
# This script can be run standalone.

set -euxo pipefail

export RUN_LIST="${RUN_LIST:-}"

# Generate RUN_LIST when not running under Kochiku.
if [ -z ${RUN_LIST} ]; then
  RUN_LIST=$(find $PWD -name '*_test.go' | tr '\n' , | sed -e 's/,$//g')
fi

DIRS=$(for f in $(echo "${RUN_LIST//,/ }"); do echo ${f%/*}; done | sort | uniq)
TESTS=$(echo ${RUN_LIST//,/ } | xargs grep '^func Test' | sed -e 's/.*\(Test[^(]*\).*/\1/g' | tr '\n' '|' | sed -e 's/|$//g')

# Run "pre-test" target for any apps we're testing.
APPS=$(echo "${DIRS}" | (grep /apps || true) | sed -e 's,^.*/apps/\([^/]*\)/.*,\1,g' | sort | uniq)
for APP in ${APPS}; do
  make -n -C ./apps/${APP} pre-test &> /dev/null && make -C ./apps/${APP} pre-test
done

# The following are needed for Docker builds in Kochiku to allow ports exposed from containers spawned from CI scripts.  
# Docker containers spawned from CI scripts will be spawned as sibling, instead of "docker in docker"
# The "socat hack" ensures that the running container can talk to the new containers through localhost 
if grep -q docker /proc/1/cgroup; then
  docker0_ip=$(ip route show | awk '/default/ {print $3}')
  # kochiku worker will be responsible for cleaning up these processes
  # Port 4000 is TiDB, 1500x are vitess
  ( socat TCP-LISTEN:4000,reuseaddr,fork  TCP:${docker0_ip}:4000 ) &
  ( socat TCP-LISTEN:15001,reuseaddr,fork  TCP:${docker0_ip}:15001 ) &
  ( socat TCP-LISTEN:15002,reuseaddr,fork  TCP:${docker0_ip}:15002 ) &
fi

go test -mod=vendor -race -run "${TESTS}" -timeout 10m -v ${DIRS}
